name: TUEL Test Framework CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  DOTNET_VERSION: "8.0.x"
  NODE_VERSION: "18.x"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test-type: [api, ui]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run API tests
        if: matrix.test-type == 'api'
        run: |
          dotnet test loc.test/TUEL.TestFramework.csproj \
            --configuration Release \
            --no-build \
            --filter "TestCategory=API" \
            --logger "trx;LogFileName=api-test-results.trx" \
            --results-directory ./TestResults
        env:
          ENV: CI
          BaseURL: https://jsonplaceholder.typicode.com
          BaseurlAPI: https://jsonplaceholder.typicode.com
          DefaultTimeoutSeconds: 30
          EntraIdUseLocalJwt: true
          EntraIdLocalJwtRole: TestUser

      - name: Setup Chrome for UI tests
        if: matrix.test-type == 'ui'
        uses: browser-actions/setup-chrome@v1

      - name: Run UI tests
        if: matrix.test-type == 'ui'
        run: |
          dotnet test loc.test/TUEL.TestFramework.csproj \
            --configuration Release \
            --no-build \
            --filter "TestCategory=UI" \
            --logger "trx;LogFileName=ui-test-results.trx" \
            --results-directory ./TestResults
        env:
          ENV: CI
          BaseURL: https://example.com
          BaseurlAPI: https://jsonplaceholder.typicode.com
          DefaultTimeoutSeconds: 30
          Browser: local-chrome
          EntraIdUseLocalJwt: true
          EntraIdLocalJwtRole: TestUser

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: TestResults/

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results (${{ matrix.test-type }})
          path: TestResults/*.trx
          reporter: dotnet-trx

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: "security-scan-results.sarif"

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/tuel-test-framework:latest
            ${{ secrets.DOCKER_USERNAME }}/tuel-test-framework:${{ github.sha }}

  release:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release Notes
        run: |
          echo "## What's Changed" >> $GITHUB_STEP_SUMMARY
          echo "- Bug fixes and improvements" >> $GITHUB_STEP_SUMMARY
          echo "- Enhanced test coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Updated dependencies" >> $GITHUB_STEP_SUMMARY

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./loc.test/bin/Release/net8.0/
          asset_name: TUEL-TestFramework-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip
